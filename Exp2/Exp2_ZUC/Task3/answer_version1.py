import math

S0 = [[0x3e, 0x72, 0x5b, 0x47, 0xca, 0xe0, 0x00, 0x33, 0x04, 0xd1, 0x54, 0x98, 0x09, 0xb9, 0x6d, 0xcb],
      [0x7b, 0x1b, 0xf9, 0x32, 0xaf, 0x9d, 0x6a, 0xa5, 0xb8, 0x2d, 0xfc, 0x1d, 0x08, 0x53, 0x03, 0x90],
      [0x4d, 0x4e, 0x84, 0x99, 0xe4, 0xce, 0xd9, 0x91, 0xdd, 0xb6, 0x85, 0x48, 0x8b, 0x29, 0x6e, 0xac],
      [0xcd, 0xc1, 0xf8, 0x1e, 0x73, 0x43, 0x69, 0xc6, 0xb5, 0xbd, 0xfd, 0x39, 0x63, 0x20, 0xd4, 0x38],
      [0x76, 0x7d, 0xb2, 0xa7, 0xcf, 0xed, 0x57, 0xc5, 0xf3, 0x2c, 0xbb, 0x14, 0x21, 0x06, 0x55, 0x9b],
      [0xe3, 0xef, 0x5e, 0x31, 0x4f, 0x7f, 0x5a, 0xa4, 0x0d, 0x82, 0x51, 0x49, 0x5f, 0xba, 0x58, 0x1c],
      [0x4a, 0x16, 0xd5, 0x17, 0xa8, 0x92, 0x24, 0x1f, 0x8c, 0xff, 0xd8, 0xae, 0x2e, 0x01, 0xd3, 0xad],
      [0x3b, 0x4b, 0xda, 0x46, 0xeb, 0xc9, 0xde, 0x9a, 0x8f, 0x87, 0xd7, 0x3a, 0x80, 0x6f, 0x2f, 0xc8],
      [0xb1, 0xb4, 0x37, 0xf7, 0x0a, 0x22, 0x13, 0x28, 0x7c, 0xcc, 0x3c, 0x89, 0xc7, 0xc3, 0x96, 0x56],
      [0x07, 0xbf, 0x7e, 0xf0, 0x0b, 0x2b, 0x97, 0x52, 0x35, 0x41, 0x79, 0x61, 0xa6, 0x4c, 0x10, 0xfe], 
      [0xbc, 0x26, 0x95, 0x88, 0x8a, 0xb0, 0xa3, 0xfb, 0xc0, 0x18, 0x94, 0xf2, 0xe1, 0xe5, 0xe9, 0x5d],
      [0xd0, 0xdc, 0x11, 0x66, 0x64, 0x5c, 0xec, 0x59, 0x42, 0x75, 0x12, 0xf5, 0x74, 0x9c, 0xaa, 0x23],
      [0x0e, 0x86, 0xab, 0xbe, 0x2a, 0x02, 0xe7, 0x67, 0xe6, 0x44, 0xa2, 0x6c, 0xc2, 0x93, 0x9f, 0xf1],
      [0xf6, 0xfa, 0x36, 0xd2, 0x50, 0x68, 0x9e, 0x62, 0x71, 0x15, 0x3d, 0xd6, 0x40, 0xc4, 0xe2, 0x0f],
      [0x8e, 0x83, 0x77, 0x6b, 0x25, 0x05, 0x3f, 0x0c, 0x30, 0xea, 0x70, 0xb7, 0xa1, 0xe8, 0xa9, 0x65],
      [0x8d, 0x27, 0x1a, 0xdb, 0x81, 0xb3, 0xa0, 0xf4, 0x45, 0x7a, 0x19, 0xdf, 0xee, 0x78, 0x34, 0x60]]
S1 = [[0x55, 0xc2, 0x63, 0x71, 0x3b, 0xc8, 0x47, 0x86, 0x9f, 0x3c, 0xda, 0x5b, 0x29, 0xaa, 0xfd, 0x77],
      [0x8c, 0xc5, 0x94, 0x0c, 0xa6, 0x1a, 0x13, 0x00, 0xe3, 0xa8, 0x16, 0x72, 0x40, 0xf9, 0xf8, 0x42],
      [0x44, 0x26, 0x68, 0x96, 0x81, 0xd9, 0x45, 0x3e, 0x10, 0x76, 0xc6, 0xa7, 0x8b, 0x39, 0x43, 0xe1],
      [0x3a, 0xb5, 0x56, 0x2a, 0xc0, 0x6d, 0xb3, 0x05, 0x22, 0x66, 0xbf, 0xdc, 0x0b, 0xfa, 0x62, 0x48],
      [0xdd, 0x20, 0x11, 0x06, 0x36, 0xc9, 0xc1, 0xcf, 0xf6, 0x27, 0x52, 0xbb, 0x69, 0xf5, 0xd4, 0x87],
      [0x7f, 0x84, 0x4c, 0xd2, 0x9c, 0x57, 0xa4, 0xbc, 0x4f, 0x9a, 0xdf, 0xfe, 0xd6, 0x8d, 0x7a, 0xeb],
      [0x2b, 0x53, 0xd8, 0x5c, 0xa1, 0x14, 0x17, 0xfb, 0x23, 0xd5, 0x7d, 0x30, 0x67, 0x73, 0x08, 0x09],
      [0xee, 0xb7, 0x70, 0x3f, 0x61, 0xb2, 0x19, 0x8e, 0x4e, 0xe5, 0x4b, 0x93, 0x8f, 0x5d, 0xdb, 0xa9],
      [0xad, 0xf1, 0xae, 0x2e, 0xcb, 0x0d, 0xfc, 0xf4, 0x2d, 0x46, 0x6e, 0x1d, 0x97, 0xe8, 0xd1, 0xe9],
      [0x4d, 0x37, 0xa5, 0x75, 0x5e, 0x83, 0x9e, 0xab, 0x82, 0x9d, 0xb9, 0x1c, 0xe0, 0xcd, 0x49, 0x89],
      [0x01, 0xb6, 0xbd, 0x58, 0x24, 0xa2, 0x5f, 0x38, 0x78, 0x99, 0x15, 0x90, 0x50, 0xb8, 0x95, 0xe4],
      [0xd0, 0x91, 0xc7, 0xce, 0xed, 0x0f, 0xb4, 0x6f, 0xa0, 0xcc, 0xf0, 0x02, 0x4a, 0x79, 0xc3, 0xde],
      [0xa3, 0xef, 0xea, 0x51, 0xe6, 0x6b, 0x18, 0xec, 0x1b, 0x2c, 0x80, 0xf7, 0x74, 0xe7, 0xff, 0x21],
      [0x5a, 0x6a, 0x54, 0x1e, 0x41, 0x31, 0x92, 0x35, 0xc4, 0x33, 0x07, 0x0a, 0xba, 0x7e, 0x0e, 0x34],
      [0x88, 0xb1, 0x98, 0x7c, 0xf3, 0x3d, 0x60, 0x6c, 0x7b, 0xca, 0xd3, 0x1f, 0x32, 0x65, 0x04, 0x28],
      [0x64, 0xbe, 0x85, 0x9b, 0x2f, 0x59, 0x8a, 0xd7, 0xb0, 0x25, 0xac, 0xaf, 0x12, 0x03, 0xe2, 0xf2]]

D = [0x44d7, 0x26bc, 0x626b, 0x135e, 0x5789, 0x35e2, 0x7135, 0x09af,0x4d78, 0x2f13, 0x6bc4, 0x1af1, 0x5e26, 0x3c4d, 0x789a, 0x47ac]

COUNT = [0x66, 0x03, 0x54, 0x92]  #32位
iv = [0] * 16 #128位
BEARER = 0x0f #5位
DIRECTION = 0 #1位
LENGTH = 0xc1
L = math.ceil(LENGTH / 32) #4字节

S = [0] * 16 
X = [0] * 4
keys = [] 
key_length = L
R1,R2 =0,0,
MOD = 2 ** 32


def get_iv():
    global COUNT, iv, BEARER, DIRECTION

    iv[0] = COUNT[0]
    iv[1] = COUNT[1]
    iv[2] = COUNT[2]
    iv[3] = COUNT[3]
    iv[4] = (BEARER << 3) | (DIRECTION << 2) | 0b00 
    iv[5] = iv[6] = iv[7] = 0
    iv[8] = iv[0]
    iv[9] = iv[1]
    iv[10] = iv[2]
    iv[11] = iv[3]
    iv[12] = iv[4]
    iv[13] = iv[5]
    iv[14] = iv[6]
    iv[15] = iv[7]


def add_mod(a, b): # OK
    return (a + b) % MOD

def circular_shift(x, n): # OK
    return ((x << n) | (x >> (32 - n))) & 0xffffffff

def Liner_1(x): # OK
    return x ^ circular_shift(x, 2) ^ circular_shift(x, 10) ^ circular_shift(x, 18) ^ circular_shift(x, 24)


def Liner_2(x): # OK
    return x ^ circular_shift(x, 8) ^ circular_shift(x, 14) ^ circular_shift(x, 22) ^ circular_shift(x, 30)


def S_box(x): # OK

    x0 = (x >> 24) & 0xff
    x1 = (x >> 16) & 0xff
    x2 = (x >> 8) & 0xff
    x3 = x & 0xff
    y0 = S0[x0 >> 4][x0 & 0xf]
    y1 = S1[x1 >> 4][x1 & 0xf] 
    y2 = S0[x2 >> 4][x2 & 0xf] 
    y3 = S1[x3 >> 4][x3 & 0xf] 
    return (y0 << 24) | (y1 << 16) | (y2 << 8) | y3


def LFSRWithInitialisationMode(u): # OK
    global S
    v = (2**15 * S[15] + 2**17 * S[13] + 2**21 * S[10] + 2**20 * S[4] + (2**8 + 1) * S[0]) % (2**31 - 1)
    S_16 = (v + u) % (2**31 - 1)
    if S_16 == 0:
        S_16 = 2**31 - 1
    S[:] = S[1:] + [S_16]
    return S

def LFSRWithWorkMode(): # OK
    global S
    v = (2**15 * S[15] + 2**17 * S[13] + 2**21 * S[10] + 2**20 * S[4] + (2**8 + 1) * S[0]) % (2**31 - 1)
    S_16 = v
    if S_16 == 0:
        S_16 = 2**31 - 1
    S[:] = S[1:] + [S_16]
    return S

def BitReconstruction(): # OK
    global S, X

    '''
    X[0] = ((S[15] & 0x7FFF8000) << 1) | (S[14] & 0x0000FFFF) 
    X[1] = ((S[11] & 0x0000FFFF) << 16) | ((S[9] & 0x7FFF8000) >> 15) 
    X[2] = ((S[7] & 0x0000FFFF) << 16) | ((S[5] & 0x7FFF8000) >> 15) 
    X[3] = ((S[2] & 0x0000FFFF) << 16) | ((S[0] & 0x7FFF8000) >> 15)
    '''

    X[0] = (((S[15] >> 15) << 16) | (S[14] & 0xffff)) & 0xffffffff
    X[1] = (((S[11] & 0xffff) << 16) | (S[9] >> 15)) & 0xffffffff
    X[2] = (((S[7] & 0xffff) << 16) | (S[5] >> 15)) & 0xffffffff
    X[3] = (((S[2] & 0xffff) << 16) | (S[0] >> 15)) & 0xffffffff
    return X

def F(): # OK
    '''
    global R1, R2, X

    W = ((X[0] ^ R1) + R2) & 0xFFFFFFFF  # 模2^32加法
    
    W1 = (R1 + X[1]) & 0xFFFFFFFF        # 模2^32加法
    W2 = (R2 ^ X[2]) & 0xFFFFFFFF        # 异或运算
    
    W1L, W1H = (W1 & 0xFFFF), (W1 >> 16)  # W1低16位和高16位
    W2L, W2H = (W2 & 0xFFFF), (W2 >> 16)
    
    input_R1 = (W1L << 16) | W2H       # L1输入：W1L || W2H
    input_R2 = (W2L << 16) | W1H       # L2输入：W2L || W1H
    
    R1 = S_box(Liner_1(input_R1))              # S盒变换后更新R1
    R2 = S_box(Liner_2(input_R2))              # S盒变换后更新R2

    return W
    '''
    
    global R1, R2, X
    W = add_mod((X[0] ^ R1), R2) 
    W_1 = add_mod(R1, X[1])
    W_2 = R2 ^ X[2]

    temp_1 = ((W_1 & 0xffff) << 16) | ((W_2 >> 16)) 
    temp_2 = ((W_2 & 0xffff) << 16) | ((W_1 >> 16))
    R1 = S_box(Liner_1(temp_1))
    R2 = S_box(Liner_2(temp_2))

    return W
    

def generate_key(): # OK
    BitReconstruction()
    W = F()
    LFSRWithWorkMode()
    for _ in range(key_length):
        BitReconstruction()
        W = F()
        keys.append(W ^ X[3])
        LFSRWithWorkMode()

def group_bit(hex_str, bit_length):
    char_length = bit_length // 4
    result = []
    for i in range(0, len(hex_str), char_length):
        group = hex_str[i:i + char_length]
        result.append(int(group, 16))
    return result

def initialize_lfsr(key, iv): # OK
    global R1, R2, S
    W = 0
    for i in range(16):
        S[i] = (key[i] << 23) | (D[i] << 8) | iv[i]
    for i in range(32):
        BitReconstruction()
        W = F() # 这里需要传入X0, X1, X2
        LFSRWithInitialisationMode(W >> 1)

def display_key(): # OK
    for i in range(key_length):
        print(f"z{i+1}: {keys[i]:08x}")


if __name__ == "__main__":
    #key == CK
    key = [0x17, 0x3d, 0x14, 0xba, 0x50, 0x03, 0x73, 0x1d, 0x7a, 0x60, 0x04, 0x94, 0x70, 0xf0, 0x0a, 0x29]

    get_iv()
    initialize_lfsr(key, iv)
    generate_key()

    IBS = "6cf65340735552ab0c9752fa6f9025fe0bd675d9005875b200000000"
    
    plaintext = group_bit(IBS, 32)

    ciphertext = []
    '''for i in range(L):
        ciphertext[i] = plaintext[i] ^ keys[i]'''
    for i in range(L):
        # 计算当前块的bit位置范围
        block_start_bit = i * 32
        block_end_bit = (i + 1) * 32
    
        # 判断当前块是否包含填充位
        if block_start_bit >= LENGTH:
            # 整个块都是填充
            ciphertext.append(0)
        elif block_end_bit > LENGTH:
            # 块的一部分是填充
            padding_in_block = block_end_bit - LENGTH
            data_bits = 32 - padding_in_block
        
            # 保留数据部分，填充部分设为0
            mask = (0xFFFFFFFF >> padding_in_block) << padding_in_block
            data_part = plaintext[i] & mask
        
            # 只加密数据部分
            encrypted_data = data_part ^ (keys[i] & mask)
            ciphertext.append(encrypted_data)
        else:
            # 块中没有填充，正常加密
            ciphertext.append(plaintext[i] ^ keys[i])

    print("ciphertext:")
    for i in range(L):
        print(f"ciphertext{i+1}: {ciphertext[i]:08x}")

    OBS = ''.join([f"{c:08x}" for c in ciphertext])
    print("OBS:")
    print(OBS)

# a6c85fc66afb8533aafc2518dfe784940ee1e4b030238cc800000000

# python answer_version1.py